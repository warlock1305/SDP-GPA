from __future__ import annotations

import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple

import pandas as pd
import streamlit as st


def get_project_root() -> Path:
    """Return the repository root directory from this file's location.

    This module is located at scripts/webui/app.py, so the root is two levels up.
    """
    return Path(__file__).resolve().parents[2]


def list_candidate_result_files(base_dir: Path) -> List[Path]:
    """Collect commonly produced analysis result files for quick access.

    The search is shallow within a curated set of known output directories to stay fast.
    """
    candidate_dirs: List[Path] = [
        base_dir / "CombinedAnalysis",
        base_dir / "comprehensive_dataset_analysis",
        base_dir / "ASTFeaturesForAnalysis",
        base_dir / "enhanced_analysis_results",
        base_dir / "KeywordAnalysis",
        base_dir / "AI-Github-Profile-Analyser",
    ]

    allowed_suffixes = {".csv", ".json", ".png"}

    files: List[Path] = []
    for directory in candidate_dirs:
        if not directory.exists() or not directory.is_dir():
            continue
        for child in directory.iterdir():
            if child.is_file() and child.suffix.lower() in allowed_suffixes:
                files.append(child)
    return sorted(files)


def group_files_by_directory(files: List[Path], base_dir: Path) -> Dict[str, List[Path]]:
    """Group files by directory, using paths relative to base_dir for readability."""
    grouped: Dict[str, List[Path]] = {}
    for file_path in files:
        directory_key = str(file_path.parent.relative_to(base_dir))
        grouped.setdefault(directory_key, []).append(file_path)
    return grouped


def render_file(file_path: Path) -> None:
    """Render a supported file type in the Streamlit UI."""
    suffix = file_path.suffix.lower()
    if suffix == ".csv":
        try:
            dataframe = pd.read_csv(file_path)
        except Exception as exc:  # noqa: BLE001
            st.error(f"Failed to read CSV: {exc}")
            return
        st.dataframe(dataframe, width="stretch")
        st.caption(f"Rows: {len(dataframe):,} â€¢ Columns: {len(dataframe.columns):,}")
        return

    if suffix == ".json":
        try:
            content = json.loads(file_path.read_text(encoding="utf-8"))
        except Exception as exc:  # noqa: BLE001
            st.error(f"Failed to read JSON: {exc}")
            return
        st.json(content, expanded=False)
        return

    if suffix == ".png":
        st.image(str(file_path), caption=file_path.name, width="stretch")
        return

    st.warning(f"Unsupported file format: {suffix}")


def build_file_selector(grouped: Dict[str, List[Path]], base_dir: Path) -> Optional[Path]:
    """Build a two-step selector: directory first, then file within that directory."""
    if not grouped:
        st.info("No result files found in expected directories.")
        return None

    directory_options: List[str] = sorted(grouped.keys())
    selected_directory: str = st.selectbox(
        "Select a results folder",
        options=directory_options,
        index=0,
    )

    files_in_directory: List[Path] = grouped[selected_directory]
    file_labels: List[str] = [str(path.relative_to(base_dir)) for path in files_in_directory]

    selected_label: str = st.selectbox(
        "Select a file to view",
        options=file_labels,
        index=0,
    )

    label_to_path: Dict[str, Path] = {label: path for label, path in zip(file_labels, files_in_directory)}
    return label_to_path.get(selected_label)


def render_header(base_dir: Path) -> None:
    """Render the page header and helpful notes."""
    st.title("Repository Analysis Viewer")
    st.write(
        "Browse CSV, JSON, and PNG outputs generated by analysis scripts. "
        "This lightweight UI does not modify any data."
    )
    st.caption(f"Project root: {base_dir}")


def main() -> None:
    base_dir = get_project_root()
    render_header(base_dir)

    with st.sidebar:
        st.header("Navigation")
        st.write("Select a folder and file to view.")

    files = list_candidate_result_files(base_dir)
    grouped = group_files_by_directory(files, base_dir)
    selected = build_file_selector(grouped, base_dir)

    if selected is None:
        return

    st.subheader(str(selected.relative_to(base_dir)))
    render_file(selected)


if __name__ == "__main__":
    main()


